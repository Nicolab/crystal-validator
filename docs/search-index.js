crystal_doc_search_index_callback({"repository_name":"github.com/Nicolab/crystal-validator","body":"# validator\n\n∠(・.-)―〉 →◎ `validator` is a [Crystal](https://crystal-lang.org) micro validations module.<br>\nVery simple and efficient, all validations return `true` or `false`.\n\nAlso [validator/check](#check) (not exposed by default) provides error message handling intended for the end user.\n\n**Validator** respects the [KISS principle](https://en.wikipedia.org/wiki/KISS_principle) and the [Unix Philosophy](https://en.wikipedia.org/wiki/Unix_philosophy). It's a great basis tool for doing your own validation logic on top of it.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  validator:\n    github: nicolab/crystal-validator\n    # version: ~1 # Indicate the last version\n```\n\n2. Run `shards install`\n\n## Usage\n\n- [Validator - API docs](https://nicolab.github.io/crystal-validator/)\n\nThere are 2 main ways to use *validator*:\n\n- As a simple validator to check rules (eg: email, url, min, max, presence, in, ...) which return a boolean.\n- As a more advanced validation system which will check a series of rules and returns all validation errors encountered with custom or standard messages.\n\nBy default the **validator** module expose only `Validator` and `Valid` (alias) in the scope:\n\n```crystal\nrequire \"validator\"\n\nValid.email? \"contact@example.org\" # => true\nValid.url? \"https://github.com/Nicolab/crystal-validator\" # => true\nValid.my_validator? \"value to validate\", \"hello\", 42 # => true\n```\n\nAn (optional) expressive validation flavor, `is` available as an alternative.\nNot exposed by default, it must be imported:\n\n```crystal\nrequire \"validator/is\"\n\nis :email?, \"contact@example.org\" # => true\nis :url?, \"https://github.com/Nicolab/crystal-validator\" # => true\nis :my_validator?, \"value to validate\", \"hello\", 42 # => true\n\n\n# raises an error if the email is not valid\nis! :email?, \"contact@@example..org\" # => Validator::Error\n```\n\n`is` is a macro, no overhead during the runtime 🚀\n By the nature of the macros, you can't pass the *validator* name dynamically with a variable like that `is(validator_name, \"my value to validate\", arg)`.\n But of course you can pass arguments with variables `is(:validator_name?, arg1, arg2)`.\n\n- [Validator - API docs](https://nicolab.github.io/crystal-validator/)\n\n### Check\n\nTo perform a series of validations with error handling, the [validator/check](https://nicolab.github.io/crystal-validator/Check.html) module offers this possibility 👍\n\nA [Validation](https://nicolab.github.io/crystal-validator/Check/Validation.html) instance provides the means to write sequential checks, fine-tune each micro-validation with their own rules and custom error message, the possibility to retrieve all error messages, etc.\n\n```crystal\nrequire \"validator/check\"\n\n# Validates the *user* data received in the HTTP controller or other.\ndef validate_user(user : Hash) : Check::Validation\n  v = Check.new_validation\n\n  # -- email\n\n  v.check :email, \"The email is required.\", is :presence?, :email, user\n  v.check :email, \"#{user[:email]} is an invalid email.\", is :email?, user[:email]?\n\n  # -- username\n\n  v.check :username, \"The username is required.\", is :presence?, :username, user\n\n  v.check(\n    :username,\n    \"The username must contain at least 2 characters.\",\n    is :min?, user[:username]?, 2\n  )\n\n  v.check(\n    :username,\n    \"The username must contain a maximum of 20 characters.\",\n    is :max?, user[:username]?, 20\n  )\nend\n\nv = validate_user user\n\npp v.valid? # => true (or false)\n\nerrors = v.errors\n\n# Inverse of v.valid?\nif errors.empty?\n  return \"no error\"\nend\n\n# Print all the errors (if any)\npp errors\n\n# It's a Hash of Array\nputs errors.size\nputs errors.first_value\nputs errors.each do |key, messages|\n  puts key   # => :username\n  puts messages # => [\"The username is required.\", \"etc...\"]\nend\n```\n\n3 methods [#check](https://nicolab.github.io/crystal-validator/Check/Validation.html#instance-method-summary):\n\n```crystal\n# check(key : Symbol, valid : Bool)\n# Using default error message\nv.check(\n  :username,\n  is(:min?, user[:username]?, 2)\n)\n\n# check(key : Symbol, message : String, valid : Bool)\n# Using custom error message\nv.check(\n  :username,\n  \"The username must contain at least 2 characters.\",\n  is(:min?, user[:username]?, 2)\n)\n\n# check(key : Symbol, valid : Bool, message : String)\n# Using custom error message\nv.check(\n  :username,\n  is(:min?, user[:username]?, 2),\n  \"The username must contain at least 2 characters.\"\n)\n```\n\n`Check` is a simple and lightweight wrapper.\nThe `Check::Validation` is agnostic of the checked data,\nof the context (model, controller, CSV file, HTTP data, socket data, JSON, etc).\n\n> Use case example:\n  Before saving to the database,\n  the custom error messages can be used for the end user response.\n\nLet your imagination run wild to add your logic around it.\n\n### Custom validator\n\nJust add your own method to register a custom *validator* or to overload an existing *validator*.\n\n```crystal\nmodule Validator\n  # My custom validator\n  def self.my_validator?(value, arg : String, another_arg : Int32) : Bool\n    # TODO: write the logic of your validator\n    return true\n  end\nend\n\n# Call it\nputs Valid.my_validator?(\"value to validate\", \"hello\", 42) # => true\n\n# or with the `is` flavor\nputs is :my_validator?, \"value to validate\", \"hello\", 42 # => true\n```\n\n## Conventions\n\n- The word \"validator\" is the method to make a \"validation\" (value validation).\n- A *validator* returns `true` if the value (or/and the condition) is valid, `false` if not.\n- The first argument(s) is (are) the value(s) to be validated.\n- Always add the `Bool` return type to a *validator*.\n- Always add the suffix `?` to the method name of a *validator*.\n- If possible, indicates the type of the *validator* arguments.\n- Spec: Battle tested.\n- [KISS](https://en.wikipedia.org/wiki/KISS_principle) and [Unix Philosophy](https://en.wikipedia.org/wiki/Unix_philosophy).\n\n## Development\n\n```sh\ncrystal spec\ncrystal tool format --check\n```\n\n> TODO: add `ameba`\n\n## Contributing\n\n1. Fork it (<https://github.com/nicolab/crystal-validator/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## LICENSE\n\n[MIT](https://github.com/Nicolab/crystal-validator/blob/master/LICENSE) (c) 2020, Nicolas Talle.\n\n## Author\n\n| [![Nicolas Tallefourtane - Nicolab.net](https://www.gravatar.com/avatar/d7dd0f4769f3aa48a3ecb308f0b457fc?s=64)](https://github.com/sponsors/Nicolab) |\n|---|\n| [Nicolas Talle](https://github.com/sponsors/Nicolab) |\n| [![Make a donation via Paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=PGRH4ZXP36GUC) |\n","program":{"html_id":"github.com/Nicolab/crystal-validator/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/Nicolab/crystal-validator","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"is(name,*args)-macro","html_id":"is(name,*args)-macro","name":"is","doc":"An (optional) expressive flavor of `Validator` (or `Valid` alias).\nNot exposed by default, must be imported:\n\n```\nrequire \"validator/is\"\n\nis :email?, \"contact@example.org\"                        # => true\nis \"email?\", \"contact@example.org\"                       # => true\nis :url?, \"https://github.com/Nicolab/crystal-validator\" # => true\n```","summary":"<p>An (optional) expressive flavor of <code><a href=\"Validator.html\">Validator</a></code> (or <code><a href=\"Valid.html\">Valid</a></code> alias).</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(name, *args)","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/is.cr#L18","def":{"name":"is","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"  \n# Symbol ? String\n\n  Valid.\n{{ name.id.chars[0] == ':' ? name[1..-1].id : name.id }}\n \n{{ args.splat }}\n\n\n"}},{"id":"is!(name,*args)-macro","html_id":"is!(name,*args)-macro","name":"is!","doc":"Same as `is` but `raise` a `Validator::Error`\ndisplaying an inspection if the validation is `false`.\nUseful for the unit tests :)","summary":"<p>Same as <code><a href=\"toplevel.html#is(name,*args)-macro\">is</a></code> but <code>raise</code> a <code><a href=\"Validator/Error.html\">Validator::Error</a></code> displaying an inspection if the validation is <code>false</code>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(name, *args)","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/is.cr#L26","def":{"name":"is!","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"  \n# Symbol ? String\n\n  valid = Valid.\n{{ name.id.chars[0] == ':' ? name[1..-1].id : name.id }}\n \n{{ args.splat }}\n\n\n  if valid == false\n    raise Validator::Error.new \"Is not \\\"#{\n{{ name }}\n}\\\":\\n#{\n{{ args.stringify }}\n}\"\n  \nend\n\n  true\n\n"}}],"types":[{"html_id":"github.com/Nicolab/crystal-validator/Check","path":"Check.html","kind":"module","full_name":"Check","name":"Check","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"check.cr","line_number":9,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr"}],"repository_name":"github.com/Nicolab/crystal-validator","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Standalone check module that provides a practical workflow for validations.","summary":"<p>Standalone check module that provides a practical workflow for validations.</p>","class_methods":[{"id":"new_validation(errors:Errors)-class-method","html_id":"new_validation(errors:Errors)-class-method","name":"new_validation","doc":"Initializes a new `Validation` instance to combine\na series of checks (`Validation#check`).\nusing an existing *errors* `Hash` (`Check::Errors`).\n\n```\nv = Check.new_validation existing_errors\n```\n\nSame as:\n\n```\nv = Check::Validation.new existing_errors\n```","summary":"<p>Initializes a new <code><a href=\"Check/Validation.html\">Validation</a></code> instance to combine a series of checks (<code><a href=\"Check/Validation.html#check(key:Symbol,message:String,valid:Bool):Validation-instance-method\">Validation#check</a></code>).</p>","abstract":false,"args":[{"name":"errors","doc":null,"default_value":"","external_name":"errors","restriction":"Errors"}],"args_string":"(errors : Errors)","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr#L322","def":{"name":"new_validation","args":[{"name":"errors","doc":null,"default_value":"","external_name":"errors","restriction":"Errors"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Validation.new(errors)"}},{"id":"new_validation-class-method","html_id":"new_validation-class-method","name":"new_validation","doc":"Initializes a new `Validation` instance to combine\na series of checks (`Validation#check`).\n\n```\nv = Check.new_validation\n```\n\nSame as:\n\n```\nv = Check::Validation.new\n```","summary":"<p>Initializes a new <code><a href=\"Check/Validation.html\">Validation</a></code> instance to combine a series of checks (<code><a href=\"Check/Validation.html#check(key:Symbol,message:String,valid:Bool):Validation-instance-method\">Validation#check</a></code>).</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr#L305","def":{"name":"new_validation","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Validation.new"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Nicolab/crystal-validator/Check/Errors","path":"Check/Errors.html","kind":"alias","full_name":"Check::Errors","name":"Errors","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"check.cr","line_number":17,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr"}],"repository_name":"github.com/Nicolab/crystal-validator","program":false,"enum":false,"alias":true,"aliased":"Hash(Symbol, Array(String))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Nicolab/crystal-validator/Check","kind":"module","full_name":"Check","name":"Check"},"doc":"Validation errors.\nIt's a `Hash` used as a container of errors, in order to handle them easily.\n\n```\nv = Check.new_validation\npp v.errors\n```","summary":"<p>Validation errors.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/Nicolab/crystal-validator/Check/Validation","path":"Check/Validation.html","kind":"class","full_name":"Check::Validation","name":"Validation","abstract":false,"superclass":{"html_id":"github.com/Nicolab/crystal-validator/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/Nicolab/crystal-validator/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Nicolab/crystal-validator/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"check.cr","line_number":115,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr"}],"repository_name":"github.com/Nicolab/crystal-validator","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Nicolab/crystal-validator/Check","kind":"module","full_name":"Check","name":"Check"},"doc":"Combines a series of checks into one validation instance,\nwith a customized error message for each case.\n\nA `Validation` instance provides the means to write sequential checks,\nfine-tune each micro-validation with their own rules and custom error message,\nthe possibility to retrieve all error messages, etc.\n\n```crystal\nrequire \"validator/check\"\n\n# Validates the *user* data received in the HTTP controller or other.\ndef validate_user(user : Hash) : Check::Validation\n  v = Check.new_validation\n\n  # -- email\n\n  v.check :email, \"The email is required.\", is :presence?, :email, user\n  v.check :email, \"#{user[:email]} is an invalid email.\", is :email?, user[:email]?\n\n  # -- username\n\n  v.check :username, \"The username is required.\", is :presence?, :username, user\n\n  v.check(\n    :username,\n    \"The username must contain at least 2 characters.\",\n    is :min?, user[:username]?, 2\n  )\n\n  v.check(\n    :username,\n    \"The username must contain a maximum of 20 characters.\",\n    is :max?, user[:username]?, 20\n  )\nend\n\nv = validate_user user\n\npp v.valid? # => true (or false)\n\nerrors = v.errors\n\n# Inverse of v.valid?\nif errors.empty?\n  return \"no error\"\nend\n\n# display all the errors (if any)\npp errors\n\n# It's a Hash of Array\nputs errors.size\nputs errors.first_value\nputs errors.each do |key, messages|\n  puts key      # => :username\n  puts messages # => [\"The username is required.\", \"etc...\"]\nend\n```\n\n3 methods [#check](https://nicolab.github.io/crystal-validator/Check/Validation.html#instance-method-summary):\n\n```crystal\n# check(key : Symbol, valid : Bool)\n# Using default standard error message\nv.check(\n  :username,\n  is(:min?, user[:username]?, 2)\n)\n\n# check(key : Symbol, message : String, valid : Bool)\n# Using custom error message\nv.check(\n  :username,\n  \"The username must contain at least 2 characters.\",\n  is(:min?, user[:username]?, 2)\n)\n\n# check(key : Symbol, valid : Bool, message : String)\n# Using custom error message\nv.check(\n  :username,\n  is(:min?, user[:username]?, 2),\n  \"The username must contain at least 2 characters.\"\n)\n```\n\n`Check` is a simple and lightweight wrapper.\nThe `Check::Validation` is agnostic of the checked data,\nof the context (model, controller, CSV file, HTTP data, socket data, JSON, etc).\n\n> Use case example:\n  Before saving to the database,\n  the custom error messages can be used for the end user response.\n\nLet your imagination run wild to add your logic around it.\n","summary":"<p>Combines a series of checks into one validation instance, with a customized error message for each case.</p>","class_methods":[],"constructors":[{"id":"new(errors:Errors)-class-method","html_id":"new(errors:Errors)-class-method","name":"new","doc":"Initializes a validation using an existing *errors* `Hash` (`Check::Errors`).\n\n```\nv = Check::Validation.new\n```\n\nSame as:\n\n```\nv = Check.new_validation\n```","summary":"<p>Initializes a validation using an existing <em>errors</em> <code>Hash</code> (<code><a href=\"../Check/Errors.html\">Check::Errors</a></code>).</p>","abstract":false,"args":[{"name":"errors","doc":null,"default_value":"","external_name":"errors","restriction":"Errors"}],"args_string":"(errors : Errors)","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr#L144","def":{"name":"new","args":[{"name":"errors","doc":null,"default_value":"","external_name":"errors","restriction":"Errors"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(errors)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Initializes a validation.\n\n```\nv = Check::Validation.new\n```\n\nSame as:\n\n```\nv = Check.new_validation\n```","summary":"<p>Initializes a validation.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr#L129","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add_error(key:Symbol,message:String):Validation-instance-method","html_id":"add_error(key:Symbol,message:String):Validation-instance-method","name":"add_error","doc":"Add a validation error.\n\n```\nv = Check.new_validation\nv.add_error(:foo, \"Foo error!\")\npp v.errors # => {:foo => [\"Foo error!\"]}\n```\n\nSee also: `Errors`","summary":"<p>Add a validation error.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(key : Symbol, message : String) : Validation","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr#L167","def":{"name":"add_error","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Validation","visibility":"Public","body":"if message.blank?\n  message = \"\\\"#{key}\\\" is not valid.\"\nend\nif @errors.has_key?(key)\nelse\n  @errors[key] = Array(String).new\nend\n@errors[key] << message\nself\n"}},{"id":"add_error(key:Symbol):Validation-instance-method","html_id":"add_error(key:Symbol):Validation-instance-method","name":"add_error","doc":"Add a validation error.\n\n> By default a standard message is used.\n\n```\nv = Check.new_validation\nv.add_error(:foo)\npp v.errors # => {:foo => [\"\\\"foo\\\" is not valid.\"]}\n```\n\nSee also: `Errors`","summary":"<p>Add a validation error.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol"}],"args_string":"(key : Symbol) : Validation","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr#L187","def":{"name":"add_error","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Validation","visibility":"Public","body":"add_error(key, \"\")\nself\n"}},{"id":"check(key:Symbol,message:String,valid:Bool):Validation-instance-method","html_id":"check(key:Symbol,message:String,valid:Bool):Validation-instance-method","name":"check","doc":"Checks a validation, often used in sequence.\n\nIf *valid* is `false`, the error *message* is added in the `errors`.\nNothing if *valid* is `true`.\n\n```\nv = Check.new_validation\n\n# -- email\n\nv.check :email, \"The email is required.\", is :presence?, :email, user\nv.check :email, \"#{user[:email]} is an invalid email.\", is :email?, user[:email]?\n\n# -- username\n\nv.check :username, \"The username is required.\", is :presence?, :username, user\n\nv.check(\n  :username,\n  \"The username must contain at least 2 characters.\",\n  is :min?, user[:username]?, 2\n)\n\nv.check(\n  :username,\n  \"The username must contain a maximum of 20 characters.\",\n  is :max?, user[:username]?, 20\n)\n\n# Print all errors\npp v.errors\n```","summary":"<p>Checks a validation, often used in sequence.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"},{"name":"valid","doc":null,"default_value":"","external_name":"valid","restriction":"Bool"}],"args_string":"(key : Symbol, message : String, valid : Bool) : Validation","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr#L229","def":{"name":"check","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"},{"name":"valid","doc":null,"default_value":"","external_name":"valid","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Validation","visibility":"Public","body":"if valid\nelse\n  add_error(key, message)\nend\nself\n"}},{"id":"check(key:Symbol,valid:Bool,message:String):Validation-instance-method","html_id":"check(key:Symbol,valid:Bool,message:String):Validation-instance-method","name":"check","doc":"Checks a validation, often used in sequence.\n\nIf *valid* is `false`, the error *message* is added in the `errors`.\nNothing if *valid* is `true`.\n\n```\nv = Check.new_validation\n\n# -- email\n\nv.check(:email, is(:presence?, :email, user), \"The email is required.\")\nv.check(:email, is(:email?, user[:email]?), \"#{user[:email]} is an invalid email.\")\n\n# -- username\n\nv.check(:username, is(:presence?, :username, user), \"The username is required.\")\n\nv.check(\n  :username,\n  is :min?, user[:username]?, 2,\n    \"The username must contain at least 2 characters.\"\n)\n\nv.check(\n  :username,\n  is :max?, user[:username]?, 20,\n    \"The username must contain a maximum of 20 characters.\"\n)\n\n# Print all errors\npp v.errors\n```","summary":"<p>Checks a validation, often used in sequence.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol"},{"name":"valid","doc":null,"default_value":"","external_name":"valid","restriction":"Bool"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(key : Symbol, valid : Bool, message : String) : Validation","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr#L266","def":{"name":"check","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol"},{"name":"valid","doc":null,"default_value":"","external_name":"valid","restriction":"Bool"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Validation","visibility":"Public","body":"if valid\nelse\n  add_error(key, message)\nend\nself\n"}},{"id":"check(key:Symbol,valid:Bool):Validation-instance-method","html_id":"check(key:Symbol,valid:Bool):Validation-instance-method","name":"check","doc":"Checks a validation, often used in sequence.\n\nIf *valid* is `false`, an error message is added in the `errors`.\nNothing if *valid* is `true`.\n\n> Unlike other `check` methods, with this one a default standard message is used.\n\n```\nv = Check.new_validation\n\nv.check(:email, is(:presence?, :email, user))\nv.check(:email, is(:email?, user[:email]?))\n\n# Print all errors\npp v.errors\n```","summary":"<p>Checks a validation, often used in sequence.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol"},{"name":"valid","doc":null,"default_value":"","external_name":"valid","restriction":"Bool"}],"args_string":"(key : Symbol, valid : Bool) : Validation","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr#L287","def":{"name":"check","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol"},{"name":"valid","doc":null,"default_value":"","external_name":"valid","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Validation","visibility":"Public","body":"if valid\nelse\n  add_error(key, \"\")\nend\nself\n"}},{"id":"errors:Errors-instance-method","html_id":"errors:Errors-instance-method","name":"errors","doc":"Errors container.\n\n```\nv = Check.new_validation\npp v.errors\n```","summary":"<p>Errors container.</p>","abstract":false,"args":[],"args_string":" : Errors","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr#L154","def":{"name":"errors","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Errors","visibility":"Public","body":"@errors"}},{"id":"valid?-instance-method","html_id":"valid?-instance-method","name":"valid?","doc":"Returns `true` if there is no error, `false` if there is one or more errors.","summary":"<p>Returns <code>true</code> if there is no error, <code>false</code> if there is one or more errors.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/check.cr#L193","def":{"name":"valid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@errors.empty?"}}],"macros":[],"types":[]}]},{"html_id":"github.com/Nicolab/crystal-validator/Valid","path":"Valid.html","kind":"alias","full_name":"Valid","name":"Valid","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"validator.cr","line_number":92,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validator.cr"}],"repository_name":"github.com/Nicolab/crystal-validator","program":false,"enum":false,"alias":true,"aliased":"Validator","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.0.0-beta\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Alias of `Validator`","summary":"<p>Alias of <code><a href=\"Validator.html\">Validator</a></code></p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/Nicolab/crystal-validator/Validator","path":"Validator.html","kind":"module","full_name":"Validator","name":"Validator","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"validators/alpha_num.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/alpha_num.cr"},{"filename":"validators/case_sensitive.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/case_sensitive.cr"},{"filename":"validators/comparisons.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr"},{"filename":"validators/format.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr"},{"filename":"validators/geo.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/geo.cr"},{"filename":"validators/presence.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr"},{"filename":"validators/uri.cr","line_number":8,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/uri.cr"},{"filename":"validator.cr","line_number":84,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validator.cr"}],"repository_name":"github.com/Nicolab/crystal-validator","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.0.0-beta\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"∠(・.-)―〉 →◎ `validator` is a [Crystal](https://crystal-lang.org) micro validations module.\nVery simple and efficient, all validations return `true` or `false`.\n\nAlso [validator/check](https://nicolab.github.io/crystal-validator/Check.html)\n(not exposed by default) provides error message handling intended for the end user.\n\nThere are 2 main ways to use *validator*:\n\n- As a simple validator to check rules (eg: email, url, min, max, presence, in, ...) which return a boolean.\n- As a more advanced validation system which will check a series of rules\n and returns all validation errors encountered with custom or standard messages.\n\nBy default the **validator** module expose only `Validator` and `Valid` (alias) in the scope:\n\n```\nrequire \"validator\"\n\nValid.email? \"contact@example.org\" # => true\nValid.url? \"https://github.com/Nicolab/crystal-validator\" # => true\nValid.my_validator? \"value to validate\", \"hello\", 42 # => true\n```\n\nAn (optional) expressive validation flavor, `is` available as an alternative.  \\\nNot exposed by default, it must be imported:\n\n```\nrequire \"validator/is\"\n\nis :email?, \"contact@example.org\"                        # => true\nis :url?, \"https://github.com/Nicolab/crystal-validator\" # => true\nis :my_validator?, \"value to validate\", \"hello\", 42      # => true\n\n# raises an error if the email is not valid\nis! :email?, \"contact@@example..org\" # => Validator::Error\n```\n\n`is` is a macro, no overhead during the runtime 🚀\n By the nature of the macros, you can't pass the *validator* name dynamically\n with a variable like that `is(validator_name, \"my value to validate\", arg)`.\n But of course you can pass arguments with variables `is(:validator_name?, arg1, arg2)`.\n\n\n## Check\n\nMake a series of checks, with a customized error message for each case.\n\n```crystal\nrequire \"validator/check\"\n\ncheck = Check.new\n\ncheck(:email, \"The email is required.\", is :absence?, :email, user)\n```\n## Custom validator\n\nJust add your own method to register a custom *validator* or to overload an existing *validator*.\n\n```crystal\nmodule Validator\n  # My custom validator\n  def self.my_validator?(value, arg : String, another_arg : Int32) : Bool\n    # TODO: write the logic of your validator\n    return true\n  end\nend\n\n# Call it\nputs Valid.my_validator?(\"value to validate\", \"hello\", 42) # => true\n\n# or with the `is` flavor\nputs is :my_validator?, \"value to validate\", \"hello\", 42 # => true\n```\n\n`Check` is a simple and lightweight wrapper, let your imagination run wild to add your logic around it.","summary":"<p>∠(・.-)―〉 →◎ <code>validator</code> is a <a href=\"https://crystal-lang.org\" target=\"_blank\">Crystal</a> micro validations module.</p>","class_methods":[{"id":"absence?(key:String|Symbol,list:NamedTuple):Bool-class-method","html_id":"absence?(key:String|Symbol,list:NamedTuple):Bool-class-method","name":"absence?","doc":"Validates the absence of the value.\n- See also `#not_in?`.\n- See also `#empty?`.","summary":"<p>Validates the absence of the value.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"NamedTuple"}],"args_string":"(key : String | Symbol, list : NamedTuple) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L47","def":{"name":"absence?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.empty?(list[key]?)"}},{"id":"absence?(key:String|Symbol|Number,list:Hash):Bool-class-method","html_id":"absence?(key:String|Symbol|Number,list:Hash):Bool-class-method","name":"absence?","doc":"Validates the absence of the value.\n- See also `#not_in?`.\n- See also `#empty?`.","summary":"<p>Validates the absence of the value.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol | Number"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Hash"}],"args_string":"(key : String | Symbol | Number, list : Hash) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L42","def":{"name":"absence?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol | Number"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.empty?(list[key]?)"}},{"id":"accepted?(value:String):Bool-class-method","html_id":"accepted?(value:String):Bool-class-method","name":"accepted?","doc":"Validates that the *value* `String` is the representation of an acceptance.\n> One of: \"yes\", \"y\", \"on\", \"o\", \"ok\", \"1\", \"true\"\n- See also `#refused?`.","summary":"<p>Validates that the <em>value</em> <code>String</code> is the representation of an acceptance.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L162","def":{"name":"accepted?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.in?(value.downcase, [\"yes\", \"y\", \"on\", \"o\", \"ok\", \"1\", \"true\"])"}},{"id":"accepted?(value):Bool-class-method","html_id":"accepted?(value):Bool-class-method","name":"accepted?","doc":"Validates that the *value* is the representation of an acceptance.\n> One of: \"yes\", \"y\", \"on\", \"o\", \"ok\", \"1\", \"true\"\n\n*value* must implements *#to_s* method.\n- See also `#refused?`.","summary":"<p>Validates that the <em>value</em> is the representation of an acceptance.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L171","def":{"name":"accepted?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.accepted?(value.to_s)"}},{"id":"ascii_only?(values:Array(String)):Bool-class-method","html_id":"ascii_only?(values:Array(String)):Bool-class-method","name":"ascii_only?","doc":"Validates that all the `String` in the *values* `Array`\nare comprised in their entirety by ASCII characters.","summary":"<p>Validates that all the <code>String</code> in the <em>values</em> <code>Array</code> are comprised in their entirety by ASCII characters.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Array(String)"}],"args_string":"(values : Array(String)) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr#L47","def":{"name":"ascii_only?","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"size = value.size\nwhile size\n  size = size - 1\n  if value.ascii_only?(values[i])\n  else\n    return false\n  end\nend\ntrue\n"}},{"id":"ascii_only?(value:String):Bool-class-method","html_id":"ascii_only?(value:String):Bool-class-method","name":"ascii_only?","doc":"Validates that the *value* `String`\nis comprised in its entirety by ASCII characters.","summary":"<p>Validates that the <em>value</em> <code>String</code> is comprised in its entirety by ASCII characters.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr#L41","def":{"name":"ascii_only?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value.ascii_only?"}},{"id":"base64?(value:String):Bool-class-method","html_id":"base64?(value:String):Bool-class-method","name":"base64?","doc":"Validates that the *value* has the format *base64*.","summary":"<p>Validates that the <em>value</em> has the format <em>base64</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr#L66","def":{"name":"base64?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if (value.match(@@rx_base64)) && ((value.size % 4) === 0)\n  return true\nend\nreturn false\n"}},{"id":"between?(value,min,max):Bool-class-method","html_id":"between?(value,min,max):Bool-class-method","name":"between?","doc":"Validates that the *value* is between (inclusive) *min* and *max*.","summary":"<p>Validates that the <em>value</em> is between (inclusive) <em>min</em> and <em>max</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":""},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":""}],"args_string":"(value, min, max) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L49","def":{"name":"between?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":""},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value >= min && value <= max"}},{"id":"domain?(value:String):Bool-class-method","html_id":"domain?(value:String):Bool-class-method","name":"domain?","doc":"Validates that the *value* is a domain or subdomain.","summary":"<p>Validates that the <em>value</em> is a domain or subdomain.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/uri.cr#L16","def":{"name":"domain?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"size = value.size\nif size > 75 || size < 4\n  return false\nend\nif value.includes?(\"..\")\n  return false\nend\nif m = value.match(@@rx_domain)\nelse\n  return false\nend\next_size = m[\"ext\"].size\nif ext_size < 2 || ext_size > 12\n  return false\nend\ntrue\n"}},{"id":"email?(value:String):Bool-class-method","html_id":"email?(value:String):Bool-class-method","name":"email?","doc":"Validates that the *value* is an email.\nThis method is stricter than the standard allows.\nIt is subjectively based on the common addresses\nof organisations (@enterprise.ltd, ...)\nand mail services suck as Gmail, Hotmail, Yahoo !, ...","summary":"<p>Validates that the <em>value</em> is an email.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/uri.cr#L89","def":{"name":"email?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"size = value.size\nif size > 60 || size < 7\n  return false\nend\nif value.includes?(\"..\")\n  return false\nend\nif value.includes?(\"--\")\n  return false\nend\nif value.includes?(\"___\")\n  return false\nend\nif m = value.match(@@rx_email)\nelse\n  return false\nend\nreturn self.domain?(\"#{m[\"name\"]}.#{m[\"ext\"]}\")\n"}},{"id":"empty?(value):Bool-class-method","html_id":"empty?(value):Bool-class-method","name":"empty?","doc":"Validates that the *value* is empty.\n- See also `#absence?`.\n- See also `#not_in?`.","summary":"<p>Validates that the <em>value</em> is empty.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L58","def":{"name":"empty?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"case value\nwhen .nil?\n  true\nwhen .is_a?(String)\n  value.presence.nil?\nwhen .is_a?(Number)\n  value == 0\nwhen .responds_to?(:size)\n  value.size == 0\nelse\n  false\nend"}},{"id":"ends?(value:String,search:Regex):Bool-class-method","html_id":"ends?(value:String,search:Regex):Bool-class-method","name":"ends?","doc":"Validates that the `String` *value* ends with *search*.\n- See also `#starts?`.\n- See also `#match?`.\n- See also `#in?`.","summary":"<p>Validates that the <code>String</code> <em>value</em> ends with <em>search</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"search","doc":null,"default_value":"","external_name":"search","restriction":"Regex"}],"args_string":"(value : String, search : Regex) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L235","def":{"name":"ends?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"search","doc":null,"default_value":"","external_name":"search","restriction":"Regex"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value.ends_with?(search)"}},{"id":"ends?(value:String,search:Char):Bool-class-method","html_id":"ends?(value:String,search:Char):Bool-class-method","name":"ends?","doc":"Validates that the `String` *value* ends with *search*.\n- See also `#starts?`.\n- See also `#match?`.\n- See also `#in?`.","summary":"<p>Validates that the <code>String</code> <em>value</em> ends with <em>search</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"search","doc":null,"default_value":"","external_name":"search","restriction":"Char"}],"args_string":"(value : String, search : Char) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L230","def":{"name":"ends?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"search","doc":null,"default_value":"","external_name":"search","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value.ends_with?(search)"}},{"id":"ends?(value:String,search:String):Bool-class-method","html_id":"ends?(value:String,search:String):Bool-class-method","name":"ends?","doc":"Validates that the `String` *value* ends with *search*.\n- See also `#starts?`.\n- See also `#match?`.\n- See also `#in?`.","summary":"<p>Validates that the <code>String</code> <em>value</em> ends with <em>search</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"search","doc":null,"default_value":"","external_name":"search","restriction":"String"}],"args_string":"(value : String, search : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L225","def":{"name":"ends?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"search","doc":null,"default_value":"","external_name":"search","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value.ends_with?(search)"}},{"id":"eq?(value,another_value):Bool-class-method","html_id":"eq?(value,another_value):Bool-class-method","name":"eq?","doc":"Validates that the *value* is equal to *another_value*.","summary":"<p>Validates that the <em>value</em> is equal to <em>another_value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"another_value","doc":null,"default_value":"","external_name":"another_value","restriction":""}],"args_string":"(value, another_value) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L10","def":{"name":"eq?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"another_value","doc":null,"default_value":"","external_name":"another_value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value == another_value"}},{"id":"gt?(value,another_value):Bool-class-method","html_id":"gt?(value,another_value):Bool-class-method","name":"gt?","doc":"Validates that the *value* is greater than *another_value*.","summary":"<p>Validates that the <em>value</em> is greater than <em>another_value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"another_value","doc":null,"default_value":"","external_name":"another_value","restriction":""}],"args_string":"(value, another_value) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L15","def":{"name":"gt?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"another_value","doc":null,"default_value":"","external_name":"another_value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value > another_value"}},{"id":"gte?(value,another_value):Bool-class-method","html_id":"gte?(value,another_value):Bool-class-method","name":"gte?","doc":"Validates that the *value* is equal to or greater than *another_value*.\n> Similar to `#min`.","summary":"<p>Validates that the <em>value</em> is equal to or greater than <em>another_value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"another_value","doc":null,"default_value":"","external_name":"another_value","restriction":""}],"args_string":"(value, another_value) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L21","def":{"name":"gte?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"another_value","doc":null,"default_value":"","external_name":"another_value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value >= another_value"}},{"id":"hex?(value:String):Bool-class-method","html_id":"hex?(value:String):Bool-class-method","name":"hex?","doc":"Validates that the `String` *value* does denote\na representation of a hexadecimal string.","summary":"<p>Validates that the <code>String</code> <em>value</em> does denote a representation of a hexadecimal string.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr#L91","def":{"name":"hex?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!value.match(@@rx_hex).nil?"}},{"id":"hex?(value:Bytes):Bool-class-method","html_id":"hex?(value:Bytes):Bool-class-method","name":"hex?","doc":"Validates that the `Bytes` *value* does denote\na representation of a hexadecimal slice of Bytes.","summary":"<p>Validates that the <code>Bytes</code> <em>value</em> does denote a representation of a hexadecimal slice of Bytes.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"}],"args_string":"(value : Bytes) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr#L97","def":{"name":"hex?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!(String.new(value)).match(@@rx_hex).nil?"}},{"id":"hex_color?(value:String):Bool-class-method","html_id":"hex_color?(value:String):Bool-class-method","name":"hex_color?","doc":"Validates that the `String` *value* does denote\na representation of a hexadecimal color.\n\n```\nValid.hex_color? \"#fff\" => true\nValid.hex_color? \"#ffffff\" => true\n```","summary":"<p>Validates that the <code>String</code> <em>value</em> does denote a representation of a hexadecimal color.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr#L108","def":{"name":"hex_color?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!value.match(@@rx_hex_color).nil?"}},{"id":"in?(value:String,str:String):Bool-class-method","html_id":"in?(value:String,str:String):Bool-class-method","name":"in?","doc":"Validates that the (*str*) `String` contains the *value*.\n- See also `#presence?`.\n- See also `#not_in?`.\n- See also `#not_empty?`.","summary":"<p>Validates that the (<em>str</em>) <code>String</code> contains the <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"args_string":"(value : String, str : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L83","def":{"name":"in?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"str.includes?(value)"}},{"id":"in?(value,list:Array):Bool-class-method","html_id":"in?(value,list:Array):Bool-class-method","name":"in?","doc":"Validates that the (*list*) contains the *value*.\n- See also `#presence?`.\n- See also `#not_in?`.\n- See also `#not_empty?`.","summary":"<p>Validates that the (<em>list</em>) contains the <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Array"}],"args_string":"(value, list : Array) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L91","def":{"name":"in?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Array"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"list.includes?(value)"}},{"id":"in?(value,list:Tuple):Bool-class-method","html_id":"in?(value,list:Tuple):Bool-class-method","name":"in?","doc":"Validates that the (*list*) contains the *value*.\n- See also `#presence?`.\n- See also `#not_in?`.\n- See also `#not_empty?`.","summary":"<p>Validates that the (<em>list</em>) contains the <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Tuple"}],"args_string":"(value, list : Tuple) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L96","def":{"name":"in?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Tuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"list.includes?(value)"}},{"id":"in?(value,list:Range):Bool-class-method","html_id":"in?(value,list:Range):Bool-class-method","name":"in?","doc":"Validates that the (*list*) contains the *value*.\n- See also `#presence?`.\n- See also `#not_in?`.\n- See also `#not_empty?`.","summary":"<p>Validates that the (<em>list</em>) contains the <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Range"}],"args_string":"(value, list : Range) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L101","def":{"name":"in?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Range"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"list.includes?(value)"}},{"id":"in?(key:Symbol|String,list:NamedTuple):Bool-class-method","html_id":"in?(key:Symbol|String,list:NamedTuple):Bool-class-method","name":"in?","doc":"Validates that the (*list*) contains the *value*.\n- See also `#presence?`.\n- See also `#not_in?`.\n- See also `#not_empty?`.","summary":"<p>Validates that the (<em>list</em>) contains the <em>value</em>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol | String"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"NamedTuple"}],"args_string":"(key : Symbol | String, list : NamedTuple) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L106","def":{"name":"in?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol | String"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"list.has_key?(key)"}},{"id":"in?(key:Symbol|String,list:Hash):Bool-class-method","html_id":"in?(key:Symbol|String,list:Hash):Bool-class-method","name":"in?","doc":"Validates that the (*list*) contains the *value*.\n- See also `#presence?`.\n- See also `#not_in?`.\n- See also `#not_empty?`.","summary":"<p>Validates that the (<em>list</em>) contains the <em>value</em>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol | String"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Hash"}],"args_string":"(key : Symbol | String, list : Hash) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L111","def":{"name":"in?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol | String"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"list.has_key?(key)"}},{"id":"ip?(value:String):Bool-class-method","html_id":"ip?(value:String):Bool-class-method","name":"ip?","doc":"TODO: Validates that the *value* is an IP (IPv4 or IPv6).","summary":"<p><span class=\"flag orange\">TODO</span>  Validates that the <em>value</em> is an IP (IPv4 or IPv6).</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/uri.cr#L70","def":{"name":"ip?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(self.ipv4?(value)) || (self.ipv6?(value))"}},{"id":"ipv4?(value:String):Bool-class-method","html_id":"ipv4?(value:String):Bool-class-method","name":"ipv4?","doc":"TODO: Validates that the *value* is an IPv4.","summary":"<p><span class=\"flag orange\">TODO</span>  Validates that the <em>value</em> is an IPv4.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/uri.cr#L75","def":{"name":"ipv4?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"raise(NotImplementedError.new(\"ipv4\"))"}},{"id":"ipv6?(value:String):Bool-class-method","html_id":"ipv6?(value:String):Bool-class-method","name":"ipv6?","doc":"TODO: Validates that the *value* is an IPv6.","summary":"<p><span class=\"flag orange\">TODO</span>  Validates that the <em>value</em> is an IPv6.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/uri.cr#L80","def":{"name":"ipv6?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"raise(NotImplementedError.new(\"ipv6\"))"}},{"id":"jwt?(value:String):Bool-class-method","html_id":"jwt?(value:String):Bool-class-method","name":"jwt?","doc":"Validates that the *value* is a *JSON Web Token*.","summary":"<p>Validates that the <em>value</em> is a <em>JSON Web Token</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr#L74","def":{"name":"jwt?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!value.match(@@rx_jwt).nil?"}},{"id":"lat_lng?(value:String):Bool-class-method","html_id":"lat_lng?(value:String):Bool-class-method","name":"lat_lng?","doc":"Validates that the *value* is a valid format representation of\na geographical position (given in latitude and longitude).","summary":"<p>Validates that the <em>value</em> is a valid format representation of a geographical position (given in latitude and longitude).</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/geo.cr#L14","def":{"name":"lat_lng?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if !(value.includes?(\",\"))\n  return false\nend\nlat, lng = value.split(\",\")\nif lat && lng\nelse\n  return false\nend\nif ((lat.starts_with?('(')) && (!(lng.ends_with?(')'))))\n  return false\nend\nif ((lng.ends_with?(')')) && (!(lat.starts_with?('('))))\n  return false\nend\nif (lat.match(@@rx_geo_lat)) && (lng.match(@@rx_geo_lng))\n  return true\nend\nreturn false\n"}},{"id":"lower?(value:String):Bool-class-method","html_id":"lower?(value:String):Bool-class-method","name":"lower?","doc":"Validates that the *value* is in lower case.","summary":"<p>Validates that the <em>value</em> is in lower case.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/case_sensitive.cr#L10","def":{"name":"lower?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(!value.blank?) && (value.downcase === value)"}},{"id":"lt?(value,another_value):Bool-class-method","html_id":"lt?(value,another_value):Bool-class-method","name":"lt?","doc":"Validates that the *value* is lesser than *another_value*.","summary":"<p>Validates that the <em>value</em> is lesser than <em>another_value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"another_value","doc":null,"default_value":"","external_name":"another_value","restriction":""}],"args_string":"(value, another_value) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L26","def":{"name":"lt?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"another_value","doc":null,"default_value":"","external_name":"another_value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value < another_value"}},{"id":"lte?(value,another_value):Bool-class-method","html_id":"lte?(value,another_value):Bool-class-method","name":"lte?","doc":"Validates that the *value* is equal to or lesser than *another_value*.\n> Similar to `#max`.","summary":"<p>Validates that the <em>value</em> is equal to or lesser than <em>another_value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"another_value","doc":null,"default_value":"","external_name":"another_value","restriction":""}],"args_string":"(value, another_value) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L32","def":{"name":"lte?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"another_value","doc":null,"default_value":"","external_name":"another_value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value <= another_value"}},{"id":"mac_addr?(value:String):Bool-class-method","html_id":"mac_addr?(value:String):Bool-class-method","name":"mac_addr?","doc":"TODO: Validates that the *value* is a MAC address.","summary":"<p><span class=\"flag orange\">TODO</span>  Validates that the <em>value</em> is a MAC address.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/uri.cr#L105","def":{"name":"mac_addr?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"raise(NotImplementedError.new(\"mac_addr\"))"}},{"id":"magnet_uri?(value:String):Bool-class-method","html_id":"magnet_uri?(value:String):Bool-class-method","name":"magnet_uri?","doc":"TODO: Validates that the *value* is a Magnet URI.","summary":"<p><span class=\"flag orange\">TODO</span>  Validates that the <em>value</em> is a Magnet URI.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/uri.cr#L110","def":{"name":"magnet_uri?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"raise(NotImplementedError.new(\"magnet_uri\"))"}},{"id":"match?(value:Number,pattern:Regex):Bool-class-method","html_id":"match?(value:Number,pattern:Regex):Bool-class-method","name":"match?","doc":"Validates that the *value* matches the *pattern*.","summary":"<p>Validates that the <em>value</em> matches the <em>pattern</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number"},{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":"Regex"}],"args_string":"(value : Number, pattern : Regex) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L15","def":{"name":"match?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number"},{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":"Regex"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!value.to_s.match(pattern).nil?"}},{"id":"match?(value:String,pattern:Regex):Bool-class-method","html_id":"match?(value:String,pattern:Regex):Bool-class-method","name":"match?","doc":"Validates that the *value* matches the *pattern*.","summary":"<p>Validates that the <em>value</em> matches the <em>pattern</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":"Regex"}],"args_string":"(value : String, pattern : Regex) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L10","def":{"name":"match?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":"Regex"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!value.match(pattern).nil?"}},{"id":"max?(value,max):Bool-class-method","html_id":"max?(value,max):Bool-class-method","name":"max?","doc":"Validates that the *value* is equal to or lesser than *max* (inclusive).\n> Similar to `#lte`.","summary":"<p>Validates that the <em>value</em> is equal to or lesser than <em>max</em> (inclusive).</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":""}],"args_string":"(value, max) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L44","def":{"name":"max?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value <= max"}},{"id":"md5?(value:String):Bool-class-method","html_id":"md5?(value:String):Bool-class-method","name":"md5?","doc":"Validates that the *value* has the format *md5*.","summary":"<p>Validates that the <em>value</em> has the format <em>md5</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr#L61","def":{"name":"md5?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!value.match(@@rx_md5).nil?"}},{"id":"min?(value,min):Bool-class-method","html_id":"min?(value,min):Bool-class-method","name":"min?","doc":"Validates that the *value* is equal to or greater than *min* (inclusive).\n> Similar to `#gte`.","summary":"<p>Validates that the <em>value</em> is equal to or greater than <em>min</em> (inclusive).</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":""}],"args_string":"(value, min) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L38","def":{"name":"min?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value >= min"}},{"id":"mongo_id?(value:Bytes):Bool-class-method","html_id":"mongo_id?(value:Bytes):Bool-class-method","name":"mongo_id?","doc":"Validates that the `Bytes` *value* does denote\na representation of a *MongoID* slice of Bytes.","summary":"<p>Validates that the <code>Bytes</code> <em>value</em> does denote a representation of a <em>MongoID</em> slice of Bytes.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"}],"args_string":"(value : Bytes) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr#L122","def":{"name":"mongo_id?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(self.hex?(value)) && (value.size == 24)"}},{"id":"mongo_id?(value:String):Bool-class-method","html_id":"mongo_id?(value:String):Bool-class-method","name":"mongo_id?","doc":"Validates that the `String` *value* does denote\na representation of a *MongoID* string.","summary":"<p>Validates that the <code>String</code> <em>value</em> does denote a representation of a <em>MongoID</em> string.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr#L116","def":{"name":"mongo_id?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(self.hex?(value)) && (value.size == 24)"}},{"id":"not_empty?(value):Bool-class-method","html_id":"not_empty?(value):Bool-class-method","name":"not_empty?","doc":"Validates that the *value* is not empty.\n- See also `#presence?`.\n- See also `#in?`.","summary":"<p>Validates that the <em>value</em> is not empty.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L71","def":{"name":"not_empty?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(self.empty?(value)) == false"}},{"id":"not_in?(value:String,str:String):Bool-class-method","html_id":"not_in?(value:String,str:String):Bool-class-method","name":"not_in?","doc":"Validates that the (*str*) `String` does not contain the *value*.\n- See also `#absence?`.\n- See also `#in?`.\n- See also `#empty?`.","summary":"<p>Validates that the (<em>str</em>) <code>String</code> does not contain the <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"args_string":"(value : String, str : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L123","def":{"name":"not_in?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!(str.includes?(value))"}},{"id":"not_in?(value,list:Array):Bool-class-method","html_id":"not_in?(value,list:Array):Bool-class-method","name":"not_in?","doc":"Validates that the (*list*) does not contain the *value*.\n- See also `#absence?`.\n- See also `#in?`.\n- See also `#empty?`.","summary":"<p>Validates that the (<em>list</em>) does not contain the <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Array"}],"args_string":"(value, list : Array) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L131","def":{"name":"not_in?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Array"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!(list.includes?(value))"}},{"id":"not_in?(value,list:Tuple):Bool-class-method","html_id":"not_in?(value,list:Tuple):Bool-class-method","name":"not_in?","doc":"Validates that the (*list*) does not contain the *value*.\n- See also `#absence?`.\n- See also `#in?`.\n- See also `#empty?`.","summary":"<p>Validates that the (<em>list</em>) does not contain the <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Tuple"}],"args_string":"(value, list : Tuple) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L136","def":{"name":"not_in?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Tuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!(list.includes?(value))"}},{"id":"not_in?(value,list:Range):Bool-class-method","html_id":"not_in?(value,list:Range):Bool-class-method","name":"not_in?","doc":"Validates that the (*list*) does not contain the *value*.\n- See also `#absence?`.\n- See also `#in?`.\n- See also `#empty?`.","summary":"<p>Validates that the (<em>list</em>) does not contain the <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Range"}],"args_string":"(value, list : Range) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L141","def":{"name":"not_in?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Range"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!(list.includes?(value))"}},{"id":"not_in?(key:Symbol|String,list:NamedTuple):Bool-class-method","html_id":"not_in?(key:Symbol|String,list:NamedTuple):Bool-class-method","name":"not_in?","doc":"Validates that the (*list*) does not contain the *value*.\n- See also `#absence?`.\n- See also `#in?`.\n- See also `#empty?`.","summary":"<p>Validates that the (<em>list</em>) does not contain the <em>value</em>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol | String"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"NamedTuple"}],"args_string":"(key : Symbol | String, list : NamedTuple) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L146","def":{"name":"not_in?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol | String"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!(list.has_key?(key))"}},{"id":"not_in?(key:Symbol|String,list:Hash):Bool-class-method","html_id":"not_in?(key:Symbol|String,list:Hash):Bool-class-method","name":"not_in?","doc":"Validates that the (*list*) does not contain the *value*.\n- See also `#absence?`.\n- See also `#in?`.\n- See also `#empty?`.","summary":"<p>Validates that the (<em>list</em>) does not contain the <em>value</em>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol | String"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Hash"}],"args_string":"(key : Symbol | String, list : Hash) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L151","def":{"name":"not_in?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Symbol | String"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!(list.has_key?(key))"}},{"id":"number?(value:String):Bool-class-method","html_id":"number?(value:String):Bool-class-method","name":"number?","doc":"Validates that the *value* is a numeric `String` representation.","summary":"<p>Validates that the <em>value</em> is a numeric <code>String</code> representation.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/alpha_num.cr#L12","def":{"name":"number?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(!value.blank?) && (!value.match(@@rx_number).nil?)"}},{"id":"port?(value:String=&quot;0&quot;,min:String=&quot;1&quot;,max:String=&quot;65535&quot;):Bool-class-method","html_id":"port?(value:String=&amp;quot;0&amp;quot;,min:String=&amp;quot;1&amp;quot;,max:String=&amp;quot;65535&amp;quot;):Bool-class-method","name":"port?","doc":"Validates that the *value* is in a valid port range,\nbetween (inclusive) 1 / *min* and 65535 / *max*.","summary":"<p>Validates that the <em>value</em> is in a valid port range, between (inclusive) 1 / <em>min</em> and 65535 / <em>max</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"\"0\"","external_name":"value","restriction":"String"},{"name":"min","doc":null,"default_value":"\"1\"","external_name":"min","restriction":"String"},{"name":"max","doc":null,"default_value":"\"65535\"","external_name":"max","restriction":"String"}],"args_string":"(value : String = <span class=\"s\">&quot;0&quot;</span>, min : String = <span class=\"s\">&quot;1&quot;</span>, max : String = <span class=\"s\">&quot;65535&quot;</span>) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/uri.cr#L37","def":{"name":"port?","args":[{"name":"value","doc":null,"default_value":"\"0\"","external_name":"value","restriction":"String"},{"name":"min","doc":null,"default_value":"\"1\"","external_name":"min","restriction":"String"},{"name":"max","doc":null,"default_value":"\"65535\"","external_name":"max","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if (self.number?(min)) && (self.number?(max))\nelse\n  return false\nend\nself.port?(value.to_i, min.to_i, max.to_i)\n"}},{"id":"port?(value=0,min=1,max=65535):Bool-class-method","html_id":"port?(value=0,min=1,max=65535):Bool-class-method","name":"port?","doc":"Validates that the *value* is in a valid port range,\nbetween (inclusive) 1 / *min* and 65535 / *max*.","summary":"<p>Validates that the <em>value</em> is in a valid port range, between (inclusive) 1 / <em>min</em> and 65535 / <em>max</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"0","external_name":"value","restriction":""},{"name":"min","doc":null,"default_value":"1","external_name":"min","restriction":""},{"name":"max","doc":null,"default_value":"65535","external_name":"max","restriction":""}],"args_string":"(value = <span class=\"n\">0</span>, min = <span class=\"n\">1</span>, max = <span class=\"n\">65535</span>) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/uri.cr#L31","def":{"name":"port?","args":[{"name":"value","doc":null,"default_value":"0","external_name":"value","restriction":""},{"name":"min","doc":null,"default_value":"1","external_name":"min","restriction":""},{"name":"max","doc":null,"default_value":"65535","external_name":"max","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if self.between?(value, 1, 65535)\nelse\n  return false\nend\nself.between?(value, min, max)\n"}},{"id":"presence?(key:String|Symbol,list:NamedTuple):Bool-class-method","html_id":"presence?(key:String|Symbol,list:NamedTuple):Bool-class-method","name":"presence?","doc":"Validates the presence of the value.\n- See also `#in?`.\n- See also `#not_empty?`.","summary":"<p>Validates the presence of the value.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"NamedTuple"}],"args_string":"(key : String | Symbol, list : NamedTuple) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L31","def":{"name":"presence?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.not_empty?(list[key]?)"}},{"id":"presence?(key:String|Symbol|Number,list:Hash):Bool-class-method","html_id":"presence?(key:String|Symbol|Number,list:Hash):Bool-class-method","name":"presence?","doc":"Validates the presence of the value.\n- See also `#in?`.\n- See also `#not_empty?`.","summary":"<p>Validates the presence of the value.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol | Number"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Hash"}],"args_string":"(key : String | Symbol | Number, list : Hash) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L26","def":{"name":"presence?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol | Number"},{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.not_empty?(list[key]?)"}},{"id":"refused?(value:String):Bool-class-method","html_id":"refused?(value:String):Bool-class-method","name":"refused?","doc":"Validates that the *value* `String` is the representation of a refusal.\n> One of: \"no\", \"n\", \"off\", \"0\", \"false\"\n- See also `#accepted?`.","summary":"<p>Validates that the <em>value</em> <code>String</code> is the representation of a refusal.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L182","def":{"name":"refused?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.in?(value.downcase, [\"no\", \"n\", \"off\", \"0\", \"false\"])"}},{"id":"refused?(value):Bool-class-method","html_id":"refused?(value):Bool-class-method","name":"refused?","doc":"Returns `true` if the *value* is the representation of a refusal.\n> One of: \"no\", \"n\", \"off\", \"0\", \"false\"\n\n*value* must implements *#to_s* method.\n- See also `#accepted?`.","summary":"<p>Returns <code>true</code> if the <em>value</em> is the representation of a refusal.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L191","def":{"name":"refused?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self.refused?(value.to_s)"}},{"id":"size?(value,size:Array(String))-class-method","html_id":"size?(value,size:Array(String))-class-method","name":"size?","doc":"Validates that the *value* is in the *size* array.","summary":"<p>Validates that the <em>value</em> is in the <em>size</em> array.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Array(String)"}],"args_string":"(value, size : Array(String))","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L74","def":{"name":"size?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size.includes?(value.size.to_s)"}},{"id":"size?(value,size:Array(Int))-class-method","html_id":"size?(value,size:Array(Int))-class-method","name":"size?","doc":"Validates that the *value* is in the *size* array.","summary":"<p>Validates that the <em>value</em> is in the <em>size</em> array.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Array(Int)"}],"args_string":"(value, size : Array(Int))","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L69","def":{"name":"size?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Array(Int)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size.includes?(value.size)"}},{"id":"size?(value,size:Range)-class-method","html_id":"size?(value,size:Range)-class-method","name":"size?","doc":"Validates that the *value* is in the *size* range.","summary":"<p>Validates that the <em>value</em> is in the <em>size</em> range.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Range"}],"args_string":"(value, size : Range)","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L64","def":{"name":"size?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Range"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size.includes?(value.size)"}},{"id":"size?(value,size:String)-class-method","html_id":"size?(value,size:String)-class-method","name":"size?","doc":"Validates that the *value* is equal to the *size*.","summary":"<p>Validates that the <em>value</em> is equal to the <em>size</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"String"}],"args_string":"(value, size : String)","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L59","def":{"name":"size?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value.size.to_s == size"}},{"id":"size?(value,size:Int)-class-method","html_id":"size?(value,size:Int)-class-method","name":"size?","doc":"Validates that the *value* is equal to the *size*.","summary":"<p>Validates that the <em>value</em> is equal to the <em>size</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int"}],"args_string":"(value, size : Int)","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/comparisons.cr#L54","def":{"name":"size?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value.size == size"}},{"id":"slug?(value:String,min=1,max=100):Bool-class-method","html_id":"slug?(value:String,min=1,max=100):Bool-class-method","name":"slug?","doc":"Validates that the *value* is a slug.","summary":"<p>Validates that the <em>value</em> is a slug.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"min","doc":null,"default_value":"1","external_name":"min","restriction":""},{"name":"max","doc":null,"default_value":"100","external_name":"max","restriction":""}],"args_string":"(value : String, min = <span class=\"n\">1</span>, max = <span class=\"n\">100</span>) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/uri.cr#L100","def":{"name":"slug?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"min","doc":null,"default_value":"1","external_name":"min","restriction":""},{"name":"max","doc":null,"default_value":"100","external_name":"max","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!value.match(/^([a-zA-Z0-9_-]{#{min},#{max}})$/).nil?"}},{"id":"starts?(value:String,search:Regex):Bool-class-method","html_id":"starts?(value:String,search:Regex):Bool-class-method","name":"starts?","doc":"Validates that the `String` *value* starts with *search*.\n- See also `#ends?`.\n- See also `#match?`.\n- See also `#in?`.","summary":"<p>Validates that the <code>String</code> <em>value</em> starts with <em>search</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"search","doc":null,"default_value":"","external_name":"search","restriction":"Regex"}],"args_string":"(value : String, search : Regex) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L213","def":{"name":"starts?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"search","doc":null,"default_value":"","external_name":"search","restriction":"Regex"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value.starts_with?(search)"}},{"id":"starts?(value:String,search:Char):Bool-class-method","html_id":"starts?(value:String,search:Char):Bool-class-method","name":"starts?","doc":"Validates that the `String` *value* starts with *search*.\n- See also `#ends?`.\n- See also `#match?`.\n- See also `#in?`.","summary":"<p>Validates that the <code>String</code> <em>value</em> starts with <em>search</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"search","doc":null,"default_value":"","external_name":"search","restriction":"Char"}],"args_string":"(value : String, search : Char) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L208","def":{"name":"starts?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"search","doc":null,"default_value":"","external_name":"search","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value.starts_with?(search)"}},{"id":"starts?(value:String,search:String):Bool-class-method","html_id":"starts?(value:String,search:String):Bool-class-method","name":"starts?","doc":"Validates that the `String` *value* starts with *search*.\n- See also `#ends?`.\n- See also `#match?`.\n- See also `#in?`.","summary":"<p>Validates that the <code>String</code> <em>value</em> starts with <em>search</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"search","doc":null,"default_value":"","external_name":"search","restriction":"String"}],"args_string":"(value : String, search : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/presence.cr#L203","def":{"name":"starts?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"search","doc":null,"default_value":"","external_name":"search","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"value.starts_with?(search)"}},{"id":"time?(value:String):Bool-class-method","html_id":"time?(value:String):Bool-class-method","name":"time?","doc":"Validates that the *value* is a time `String` representation.","summary":"<p>Validates that the <em>value</em> is a time <code>String</code> representation.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr#L31","def":{"name":"time?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(!value.blank?) && (!value.match(@@rx_time).nil?)"}},{"id":"upper?(value:String):Bool-class-method","html_id":"upper?(value:String):Bool-class-method","name":"upper?","doc":"Validates that the *value* is in upper case.","summary":"<p>Validates that the <em>value</em> is in upper case.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/case_sensitive.cr#L15","def":{"name":"upper?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(!value.blank?) && (value.upcase === value)"}},{"id":"url?(value:String):Bool-class-method","html_id":"url?(value:String):Bool-class-method","name":"url?","doc":"Validates that the *value* is a URL.","summary":"<p>Validates that the <em>value</em> is a URL.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/uri.cr#L45","def":{"name":"url?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"size = value.size\nif ((size >= 2083 || size < 11) || (value.match(/[\\s<>]/))) || (value.starts_with?(\"mailto:\"))\n  return false\nend\nif m = value.match(@@rx_url)\nelse\n  return false\nend\nif self.domain?(\"#{m[\"name\"]}.#{m[\"ext\"]}\")\nelse\n  return false\nend\nsp = (value.gsub(/^http(?:s)?:\\/\\//, \"\")).split(\":\")\nif sp.size > 1\n  if m_port = sp[1].match(/^[0-9]+/)\n  else\n    return true\n  end\n  return self.port?(m_port[0])\nend\ntrue\n"}},{"id":"uuid?(value:String,version=0):Bool-class-method","html_id":"uuid?(value:String,version=0):Bool-class-method","name":"uuid?","doc":"Validates that the *value* is a *UUID*\nVersions: 0 (all), 3, 4 and 5. *version* by default is 0 (all).","summary":"<p>Validates that the <em>value</em> is a <em>UUID</em> Versions: 0 (all), 3, 4 and 5.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"version","doc":null,"default_value":"0","external_name":"version","restriction":""}],"args_string":"(value : String, version = <span class=\"n\">0</span>) : Bool","source_link":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validators/format.cr#L82","def":{"name":"uuid?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"version","doc":null,"default_value":"0","external_name":"version","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if @@rx_uuid.has_key?(version)\nelse\n  return false\nend\n!value.match(@@rx_uuid[version]).nil?\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/Nicolab/crystal-validator/Validator/Error","path":"Validator/Error.html","kind":"class","full_name":"Validator::Error","name":"Error","abstract":false,"superclass":{"html_id":"github.com/Nicolab/crystal-validator/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/Nicolab/crystal-validator/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/Nicolab/crystal-validator/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/Nicolab/crystal-validator/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"validator.cr","line_number":88,"url":"https://github.com/Nicolab/crystal-validator/blob/88703aecab519ceb54126df236cdb2e1b3051bf9/src/validator.cr"}],"repository_name":"github.com/Nicolab/crystal-validator","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/Nicolab/crystal-validator/Validator","kind":"module","full_name":"Validator","name":"Validator"},"doc":"Used by `is!` when a validation is not `true`.","summary":"<p>Used by <code><a href=\"../toplevel.html#is!(name,*args)-macro\">is!</a></code> when a validation is not <code>true</code>.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}})